for(file in list.files())
for(file in list.files())
for(file in list.files())
for(file in list.files())
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
setwd(curDir)
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
curDir<-getwd()
print(curDir)
setwd(directory)
fileslist<-list.files()
for(i in id)
{
data<-read.csv(fileslist[i])
}
setwd(curDir)
mean(data[,pollutant],na.rm = TRUE)
}
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
curDir<-getwd()
print(curDir)
setwd(directory)
idc<-c()
nobs<-c()
fileslist<-list.files()
for(i in id)
{
rowObs<-0
data<-read.csv(fileslist[i])
for(rowNum in 1:nrow(data)) {
row <- data[rowNum ,]
rowNA<-FALSE
for (col in row){
if (is.na(col)){
rowNA<-TRUE
break
}
}
if(rowNA==FALSE){
rowObs<-rowObs+1
}
}
idc=append(idc,i)
nobs=append(nobs,rowObs)
}
setwd(curDir)
resultFrame<-data.frame(idc,nobs)
names(resultFrame)<-c("id","nobs")
resultFrame
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
curDir<-getwd()
print(curDir)
setwd(directory)
idc<-c()
nobs<-c()
i=0
for(file in list.files())
{
i=i+1
rowObs<-0
data<-read.csv(file)
for(rowNum in 1:nrow(data)) {
row <- data[rowNum ,]
rowNA<-FALSE
for (col in row){
if (is.na(col)){
rowNA<-TRUE
break
}
}
if(rowNA==FALSE){
rowObs<-rowObs+1
}
}
idc=append(idc,i)
nobs=append(nobs,rowObs)
}
setwd(curDir)
result=0
for (obs in nobs){
if (obs>=threshold){
result = result + obs
}
}
result
}
print(pollutantmean("specdata", "sulfate", 1:10))
print(pollutantmean("specdata", "nitrate", 70:72))
print(pollutantmean("specdata", "nitrate", 23))
print(complete("specdata", 1))
print(complete("specdata", c(2, 4, 8, 10, 12)))
print(complete("specdata", 30:25))
print(complete("specdata", 3))
print(cr <- corr("specdata", 150))
print(head(cr))
print(summary(cr))
cr <- corr("specdata", 400)
print(head(cr))
print(summary(cr))
cr <- corr("specdata", 5000)
print(summary(cr))
print(length(cr))
cr <- corr("specdata")
print(summary(cr))
print(length(cr))
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
setwd("C:/selfdev/Coursera/Course 2 - R Language/Week 2")
source('C:/selfdev/Coursera/Course 2 - R Language/Week 2/pollutantmean.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
mt_x
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
inv
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
[mt_x]
mt_x
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
x
mtx_inv
x$getinv()
x$get()
x$set(NULL)
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
x
x = matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3)
x
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
x = matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3)
x
solve(x,...)
x
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
debugSource('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source('C:/selfdev/Coursera/Course 2 - R Language/Week 3/matrix.R')
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
2
submit()
submit()
install.packages("RMySQL")
library(plyr)
library(timeDate)
library(chron)
library(ggplot2)
library(gridExtra)
library(lattice)
#options(echo=TRUE)
setwd("~/selfdev/Coursera/Course 5 - Reproducible Research/Week 1")
#Download the file and unzip it if it does not exist(Check for the constituent file)
if(!file.exists("activity.csv")) {
file <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",file)
unzip(file) # unzip the file
unlink(file) # remove the temporary file
}
#Read data and ignore nulls(NA values)
fitnessData = read.csv(file="activity.csv",colClasses =  c("integer", "character", "character"))
fitnessData$date<-as.Date(fitnessData$date,format="%Y-%m-%d" ) #Convert dates from string to date
weekEnd = (is.weekend(fitnessData$date))  #create vector with weekend indicator
fitnessData[,"weekend"]<-as.factor(weekEnd) # add weekend as a factor to original data
fitnessData$interval=as.numeric(fitnessData$interval)
nonNullfdata = na.omit(fitnessData) #Create a separate set of non-NA values
## What is mean total number of steps taken per day?
aggFitnessData = aggregate(nonNullfdata$steps,list(nonNullfdata$date), sum)
rename(aggFitnessData,c("Group.1" = "Date", "x"="Steps"))
names(aggFitnessData)<-c("Date","Steps")
qplot(aggFitnessData$Steps, geom="histogram", xlab = "Steps by Day", ylab = "Frequency",col=I("black"),fill=I("blue"),bins=50)
meanSteps = mean(aggFitnessData$Steps)
medianSteps = median(aggFitnessData$Steps)
meanstr = sprintf("The mean number of steps per day = %f",meanSteps)
medianstr = sprintf("The median number of steps per day = %f",medianSteps)
print(meanstr)
print(medianstr)
## What is the average daily activity pattern?
meanByInterval <- aggregate(nonNullfdata$steps,list(nonNullfdata$interval), mean)
names(meanByInterval)<-c("Interval","MeanSteps")
xyplot(MeanSteps ~ Interval, data=meanByInterval, type="l", grid=TRUE, ylab="Number of steps", xlab="5-minute interval", main="Average steps by 5-minutes intervals")
maxSteps = max(meanByInterval$MeanSteps)
maxIndex=which(meanByInterval$MeanSteps==maxSteps)
maxinterval = meanByInterval$Interval[maxIndex]
maxstr= sprintf("The interval in which max number of steps occured is %g", maxinterval)
print(maxstr)
## Imputing missing values
totalNA = nrow(fitnessData) - nrow(nonNullfdata)
NAstr= sprintf("The number of rows with null values is %g", totalNA)
print(NAstr)
normalisedData<-fitnessData
for (i in 1:nrow(normalisedData)){
if (is.na(normalisedData$steps[i])){
value <- meanByInterval$MeanSteps[which(normalisedData$interval[i] == meanByInterval$Interval)]
normalisedData$steps[i] = value
}
}
##What is mean total number of steps taken per day?
aggnFitnessData = aggregate(normalisedData$steps,list(normalisedData$date), sum)
rename(aggnFitnessData,c("Group.1" = "Date", "x"="Steps"))
names(aggnFitnessData)<-c("Date","Steps")
meannSteps = mean(aggnFitnessData$Steps)
mediannSteps = median(aggnFitnessData$Steps)
meannstr = sprintf("The mean number of steps per day = %f",meannSteps)
mediannstr = sprintf("The median number of steps per day = %f",mediannSteps)
print(meannstr)
print(mediannstr)
qplot(aggnFitnessData$Steps, geom="histogram", xlab = "Steps by Day", ylab = "Frequency",col=I("black"),fill=I("blue"),bins=50)
## Are there differences in activity patterns between weekdays and weekends?
xyplot(steps~interval|weekend, data=normalisedData, type='l', layout=c(1, 2))
## Loading and preprocessing the data
library(plyr)
library(timeDate)
library(chron)
library(ggplot2)
library(gridExtra)
library(lattice)
#options(echo=TRUE)
setwd("~/selfdev/Coursera/Course 5 - Reproducible Research/Week 1")
#Download the file and unzip it if it does not exist(Check for the constituent file)
if(!file.exists("activity.csv")) {
file <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",file)
unzip(file) # unzip the file
unlink(file) # remove the temporary file
}
install-packages(gridextra)
exit
quit
bye
quit
## Loading and preprocessing the data
library(plyr)
library(timeDate)
library(chron)
library(ggplot2)
library(lattice)
#options(echo=TRUE)
setwd("~/selfdev/Coursera/Course 5 - Reproducible Research/Week 1")
#Download the file and unzip it if it does not exist(Check for the constituent file)
if(!file.exists("activity.csv")) {
file <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",file)
unzip(file) # unzip the file
unlink(file) # remove the temporary file
}
toc: yes
pdf_document: default
---
title: 'Reproducible Research: Peer Assessment 1'
output:
html_document:
fig_caption: yes
keep_md: yes
number_sections: yes
toc: yes
pdf_document: default
---
```{r, echo=TRUE}
## Loading and preprocessing the data
library(plyr)
library(timeDate)
library(chron)
library(ggplot2)
library(lattice)
#options(echo=TRUE)
setwd("~/selfdev/Coursera/Course 5 - Reproducible Research/Week 1")
#Download the file and unzip it if it does not exist(Check for the constituent file)
if(!file.exists("activity.csv")) {
file <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",file)
unzip(file) # unzip the file
unlink(file) # remove the temporary file
}
```
#Read data and ignore nulls(NA values)
fitnessData = read.csv(file="activity.csv",colClasses =  c("integer", "character", "character"))
fitnessData$date<-as.Date(fitnessData$date,format="%Y-%m-%d" ) #Convert dates from string to date
weekEnd = (is.weekend(fitnessData$date))  #create vector with weekend indicator
fitnessData[,"weekend"]<-as.factor(weekEnd) # add weekend as a factor to original data
fitnessData$interval=as.numeric(fitnessData$interval)
nonNullfdata = na.omit(fitnessData) #Create a separate set of non-NA values
## What is mean total number of steps taken per day?
aggFitnessData = aggregate(nonNullfdata$steps,list(nonNullfdata$date), sum)
rename(aggFitnessData,c("Group.1" = "Date", "x"="Steps"))
names(aggFitnessData)<-c("Date","Steps")
qplot(aggFitnessData$Steps, geom="histogram", xlab = "Steps by Day", ylab = "Frequency",col=I("black"),fill=I("blue"),bins=50)
meanSteps = mean(aggFitnessData$Steps)
medianSteps = median(aggFitnessData$Steps)
meanstr = sprintf("The mean number of steps per day = %f",meanSteps)
medianstr = sprintf("The median number of steps per day = %f",medianSteps)
print(meanstr)
print(medianstr)
## What is the average daily activity pattern?
meanByInterval <- aggregate(nonNullfdata$steps,list(nonNullfdata$interval), mean)
names(meanByInterval)<-c("Interval","MeanSteps")
xyplot(MeanSteps ~ Interval, data=meanByInterval, type="l", grid=TRUE, ylab="Number of steps", xlab="5-minute interval", main="Average steps by 5-minutes intervals")
maxSteps = max(meanByInterval$MeanSteps)
maxIndex=which(meanByInterval$MeanSteps==maxSteps)
maxinterval = meanByInterval$Interval[maxIndex]
maxstr= sprintf("The interval in which max number of steps occured is %g", maxinterval)
print(maxstr)
## Imputing missing values
totalNA = nrow(fitnessData) - nrow(nonNullfdata)
NAstr= sprintf("The number of rows with null values is %g", totalNA)
print(NAstr)
normalisedData<-fitnessData
for (i in 1:nrow(normalisedData)){
if (is.na(normalisedData$steps[i])){
value <- meanByInterval$MeanSteps[which(normalisedData$interval[i] == meanByInterval$Interval)]
normalisedData$steps[i] = value
}
}
##What is mean total number of steps taken per day?
aggnFitnessData = aggregate(normalisedData$steps,list(normalisedData$date), sum)
rename(aggnFitnessData,c("Group.1" = "Date", "x"="Steps"))
names(aggnFitnessData)<-c("Date","Steps")
meannSteps = mean(aggnFitnessData$Steps)
mediannSteps = median(aggnFitnessData$Steps)
meannstr = sprintf("The mean number of steps per day = %f",meannSteps)
mediannstr = sprintf("The median number of steps per day = %f",mediannSteps)
print(meannstr)
print(mediannstr)
qplot(aggnFitnessData$Steps, geom="histogram", xlab = "Steps by Day", ylab = "Frequency",col=I("black"),fill=I("blue"),bins=50)
## Are there differences in activity patterns between weekdays and weekends?
xyplot(steps~interval|weekend, data=normalisedData, type='l', layout=c(1, 2))
```
install.packages("timeDate")
install.packages("chron")
install.packages("chron")
install.packages("chron")
## Loading and preprocessing the data
library(plyr)
library(timeDate)
library(chron)
library(ggplot2)
library(lattice)
#options(echo=TRUE)
setwd("~/selfdev/Coursera/Course 5 - Reproducible Research/Week 1")
#Download the file and unzip it if it does not exist(Check for the constituent file)
if(!file.exists("activity.csv")) {
file <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",file)
unzip(file) # unzip the file
unlink(file) # remove the temporary file
}
```
#Read data and ignore nulls(NA values)
fitnessData = read.csv(file="activity.csv",colClasses =  c("integer", "character", "character"))
fitnessData$date<-as.Date(fitnessData$date,format="%Y-%m-%d" ) #Convert dates from string to date
weekEnd = (is.weekend(fitnessData$date))  #create vector with weekend indicator
fitnessData[,"weekend"]<-as.factor(weekEnd) # add weekend as a factor to original data
fitnessData$interval=as.numeric(fitnessData$interval)
nonNullfdata = na.omit(fitnessData) #Create a separate set of non-NA values
## What is mean total number of steps taken per day?
aggFitnessData = aggregate(nonNullfdata$steps,list(nonNullfdata$date), sum)
rename(aggFitnessData,c("Group.1" = "Date", "x"="Steps"))
names(aggFitnessData)<-c("Date","Steps")
qplot(aggFitnessData$Steps, geom="histogram", xlab = "Steps by Day", ylab = "Frequency",col=I("black"),fill=I("blue"),bins=50)
meanSteps = mean(aggFitnessData$Steps)
medianSteps = median(aggFitnessData$Steps)
meanstr = sprintf("The mean number of steps per day = %f",meanSteps)
medianstr = sprintf("The median number of steps per day = %f",medianSteps)
print(meanstr)
print(medianstr)
## What is the average daily activity pattern?
meanByInterval <- aggregate(nonNullfdata$steps,list(nonNullfdata$interval), mean)
names(meanByInterval)<-c("Interval","MeanSteps")
xyplot(MeanSteps ~ Interval, data=meanByInterval, type="l", grid=TRUE, ylab="Number of steps", xlab="5-minute interval", main="Average steps by 5-minutes intervals")
maxSteps = max(meanByInterval$MeanSteps)
maxIndex=which(meanByInterval$MeanSteps==maxSteps)
maxinterval = meanByInterval$Interval[maxIndex]
maxstr= sprintf("The interval in which max number of steps occured is %g", maxinterval)
print(maxstr)
## Imputing missing values
totalNA = nrow(fitnessData) - nrow(nonNullfdata)
NAstr= sprintf("The number of rows with null values is %g", totalNA)
print(NAstr)
normalisedData<-fitnessData
for (i in 1:nrow(normalisedData)){
if (is.na(normalisedData$steps[i])){
value <- meanByInterval$MeanSteps[which(normalisedData$interval[i] == meanByInterval$Interval)]
normalisedData$steps[i] = value
}
}
##What is mean total number of steps taken per day?
aggnFitnessData = aggregate(normalisedData$steps,list(normalisedData$date), sum)
rename(aggnFitnessData,c("Group.1" = "Date", "x"="Steps"))
names(aggnFitnessData)<-c("Date","Steps")
meannSteps = mean(aggnFitnessData$Steps)
mediannSteps = median(aggnFitnessData$Steps)
meannstr = sprintf("The mean number of steps per day = %f",meannSteps)
mediannstr = sprintf("The median number of steps per day = %f",mediannSteps)
print(meannstr)
print(mediannstr)
qplot(aggnFitnessData$Steps, geom="histogram", xlab = "Steps by Day", ylab = "Frequency",col=I("black"),fill=I("blue"),bins=50)
## Are there differences in activity patterns between weekdays and weekends?
xyplot(steps~interval|weekend, data=normalisedData, type='l', layout=c(1, 2))
```
head(normalisedData)
setwd("C:/Users/ashish-lagwankar/GitHub/RepData_PeerAssessment1")
setwd("C:/Users/ashish-lagwankar/GitHub/RepData_PeerAssessment1")
html_document:
fig_caption: yes
keep_md: yes
number_sections: yes
toc: yes
